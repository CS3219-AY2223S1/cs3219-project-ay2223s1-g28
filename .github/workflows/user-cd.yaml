name: Continuous Deployment - User Service

on:
  push:
    branches: [ "main", "deployment-test", "auth" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: cs3219-g28-peerprep-cluster
  GKE_ZONE: asia-southeast1
  DEPLOYMENT_NAME: user-deployment
  IMAGE: user
  # secrets
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  DB_CLOUD_URI: ${{ secrets.USER_DB_CLOUD_URI }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  REDIS_CLOUD_HOST: ${{ secrets.REDIS_CLOUD_HOST }}
  REDIS_CLOUD_PORT: ${{ secrets.REDIS_CLOUD_PORT }}
  REDIS_CLOUD_PASSWORD: ${{ secrets.REDIS_CLOUD_PASSWORD }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./gke

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Authentication via credentials json
      - id: 'auth'
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0.8.3
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # Setup gcloud CLI
      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v0.6.0
      
      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      # Build the Docker image
      #
      # GITHUBP_SHA:
      # The commit SHA that triggered the workflow. 
      # The value of this commit SHA depends on the event that triggered the workflow. 
      # 
      # GITHUB_REF:
      # The fully-formed ref of the branch or tag that triggered the workflow run.
      # For workflows triggered by push, this is the branch or tag ref that was pushed.
      - name: Build
        run: |-
          docker build ../user-service \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
      
      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          cd $IMAGE
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Delete Kubernetes Secrets created previously
      - name: Delete Secrets
        run: |-
          kubectl delete secret user-secrets

      # Create Kubernetes Secrets
      - name: Create Secrets
        run: |-
          kubectl create secret generic user-secrets \
            --from-literal=FRONTEND_URL="$FRONTEND_URL" \
            --from-literal=DB_CLOUD_URI="$DB_CLOUD_URI" \

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          cd $IMAGE
          ./kustomize edit set image gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
